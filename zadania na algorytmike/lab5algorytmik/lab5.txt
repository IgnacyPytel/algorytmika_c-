#include <iostream>
#include <string>
#include <vector>

using namespace std;

void wczytywanie(string &tekst, string &wzorzec){
    cout<<"Podaj tekst: ";
    cin.ignore();
    getline(cin,tekst);
    cout<<"Podaj wzorzec: ";
    getline(cin,wzorzec);
}





vector<int> naiwny(string wzorzec, string tekst) {
    vector<int> wynik;
    int wzorzec_dl = wzorzec.length();
    int tekst_dl = tekst.length();
    for (int i = 0; i <= tekst_dl - wzorzec_dl; i++) {
        bool znaleziono = true;
        for (int j = 0; j < wzorzec_dl; j++) {
            if (tekst[i+j] != wzorzec[j]) {
                znaleziono = false;
                break;
            }
        }
        if (znaleziono) {
            wynik.push_back(i);
        }
    }
    return wynik;
}



void zad5_1(string wzorzec, string tekst){
    vector<int> wynik = naiwny(wzorzec, tekst);
    cout << "Wzorzec znaleziony na indeksach: ";
    for (int i : wynik) {
        cout << i << " ";
    }
    cout << endl;
}



void KMP(string const& tekst, string const& wzorzec)
{
    int const n = tekst.size();
    int const m = wzorzec.size();

    // tworzenie tablicy prefiksów dla wzorca
    vector<int> tab(m, 0);
    int j = 0;
    for (int i = 1; i < m; ++i) {
        while (j > 0 && wzorzec[i] != wzorzec[j]) {
            j = tab[j - 1];
        }
        if (wzorzec[i] == wzorzec[j]) {
            ++j;
        }
        tab[i] = j;
    }

    // wyszukiwanie wzorca w tekście
    j = 0;
    for (int i = 0; i < n; ++i) {
        while (j > 0 && tekst[i] != wzorzec[j]) {
            j = tab[j - 1];
        }
        if (tekst[i] == wzorzec[j]) {
            ++j;
        }
        if (j == m) {
            cout << "Znaleziono wzorzec na indeksie " << i - j + 1 << "\n";
            j = tab[j - 1];
        }
    }
}

void zadanie_5_3() {
    string tekst;
    string wzorzec;
    wczytywanie(tekst, wzorzec);
    KMP(tekst, wzorzec);
}


void procedure_tablicaPrzesuniec(string wzorzec, int p[]){
    int n_pocz = 65;
    int n_kon = 122;
    int dlW =  wzorzec.length();


    for(int i=0; i<= n_kon-n_pocz; i++){
        p[i]=-1;
    }

    for(int i=0; i<dlW; i++){
        p[wzorzec[i]-n_pocz]=i;
    }
}


//nie chcialo mi sie bawic tutaj juz z vektorami
void procedure_BM(string wzorzec, string tekst,int p[]){
    int n_pocz = 65;
    int i=0;
    int j=0;
    int dlT = tekst.length();
    int dlW =  wzorzec.length();



    while(i<=dlT-dlW){
        j=dlW-1;
        while(j>-1 && wzorzec[j]==tekst[i+j]){
            j--;
        }

        if(j==-1){

            cout <<"Znaleziono wzorzec na indeksach: "<< i << " ";
            i++;
        }
        else{

            i=i+max(1,j-p[tekst[i+j]-n_pocz]);
        }
    }
}

int main()
{
    string wzorzec,tekst;
    int p[58];
    int wybor;
    do{
        cout << "1.) wczytaj dane"<< endl;
        cout << "2.) alogrytm naiwny"<< endl;
        cout << "3.) alogrytm KMP"<< endl;
        cout << "4.) alogrytm BM"<< endl;
        cout << "5.) wyjscie z programu"<< endl;
        cin >> wybor;
        switch (wybor){
            case 1:
                wczytywanie(wzorzec,tekst);
                break;
            case 2:
                zad5_1(tekst,wzorzec);
                break;
            case 3:
                zadanie_5_3();
                break;
            case 4:
                wczytywanie(tekst,wzorzec);
                procedure_tablicaPrzesuniec(wzorzec,p);
                procedure_BM(wzorzec,tekst,p);
                cout<<endl;
                break;
            case 5:
                break;
            default:
                cout<<"Niepoprawny wybor! Wybierz jeszcze raz.\n";
                break;
        }
    }while(wybor!=5);
    return 0;
}