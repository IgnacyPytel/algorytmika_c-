#include <iostream>
#include <fstream>
#include <cstdlib>


struct QueueNode {
    QueueNode* next;
    char data;
};

struct Queue {
    QueueNode* head;
    QueueNode* tail;
};

bool isEmpty(const Queue& queue) {
    return queue.head == nullptr;
}

void push(Queue& queue, char data) {
    QueueNode* newNode = new QueueNode;
    newNode->data = data;
    newNode->next = nullptr;

    if (isEmpty(queue)) {
        queue.head = newNode;
        queue.tail = newNode;
    } else {
        queue.tail->next = newNode;
        queue.tail = newNode;
    }
}

void pop(Queue& queue) {
    if (isEmpty(queue)) {
        std::cout << "Kolejka jest pusta, nie da się usunac elementu." << std::endl;
    } else {
        QueueNode* temp = queue.head;
        queue.head = queue.head->next;

        std::cout << "Usunieto element z kolejki: " << temp->data << std::endl;
        delete temp;

        if (queue.head == nullptr) {
            queue.tail = nullptr;
        }
    }
}

char first(const Queue& queue) {
    if (isEmpty(queue)) {
        std::cout << "Kolejka jest pusta." << std::endl;
        return '\0';
    } else {
        return queue.head->data;
    }
}

void clearQueue(Queue& queue) {
    while (!isEmpty(queue)) {
        pop(queue);
    }
}

void loadFromFile(Queue& queue, const std::string& filename) {
    std::ifstream file(filename);

    if (!file) {
        std::cout << "Blad otwarcia pliku." << std::endl;
        return;
    }

    char ch;
    while (file >> ch) {
        if (ch >= 'A' && ch <= 'Z') {
            push(queue, ch);
        }
    }

    file.close();
}
void displayQueue(const Queue& queue){
    if (isEmpty(queue))
    {
        std::cout<<"Kolejka jest pusta."<<std::endl;
    }
    else{
        std::cout<<"kolejka: ";
        QueueNode* current = queue.head;
        while(current != nullptr){
            std::cout << current->data<<" ";
            current = current->next;
        }
        std::cout<<std::endl;
    }
}

void Menu() {
    std::cout << "======== MENU ========" << std::endl;
    std::cout << "1. Sprawdz czy kolejka jest pusta" << std::endl;
    std::cout << "2. Dodaj element do kolejki" << std::endl;
    std::cout << "3. Usun element z kolejki" << std::endl;
    std::cout << "4. Pobierz pierwszy element z kolejki" << std::endl;
    std::cout << "5. Usun wszystkie elementy z kolejki" << std::endl;
    std::cout << "6. Wczytaj duze litery z pliku" << std::endl;
    std::cout << "7. Pokaz kolejke" << std::endl;
    std::cout << "8. Wyjscie" << std::endl;
    std::cout << "=======================" << std::endl;
    std::cout << "Wybierz opcje: ";
}

int main() {
    Queue queue;
    queue.head = nullptr;
    queue.tail = nullptr;



    int choice;
    char element;
    std::string filename;

    do {
        Menu();
        std::cin >> choice;

        switch (choice) {
            case 1:
                if (isEmpty(queue)) {
                    std::cout << "Kolejka jest pusta." << std::endl;
                } else {
                    std::cout << "Kolejka nie jest pusta.";
                }
                break;
            case 2:
                std::cout << "Podaj element do dodania: ";
                std::cin >> element;
                push(queue, element);
                break;
            case 3:
                pop(queue);
                break;
            case 4:
                std::cout << "Pierwszy element w kolejce to: " << first(queue) << std::endl;
                break;
            case 5:
                clearQueue(queue);
                std::cout << "Usunieto wszystkie elementy z kolejki." << std::endl;
                break;
            case 6:
                std::cout << "Podaj nazwę pliku: ";
                std::cin >> filename;
                loadFromFile(queue, filename);
                break;
            case 7:
                displayQueue(queue);
                break;
            case 8:
                std::cout << "Do widzenia!" << std::endl;
                break;
            default:
                std::cout << "Nieznana opcja. Wybierz ponownie." << std::endl;
                break;
        }
    } while (choice != 8);

    return 0;
}
